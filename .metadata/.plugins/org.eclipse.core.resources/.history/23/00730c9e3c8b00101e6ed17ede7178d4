package IMPL;

import DAO.AccountDAo;
import DAO.AccountDAo;
import POJO.Account;
import UTILITY.DBUtility;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class AccountDaoImpl implements AccountDAo {

    public boolean createAccount(Account account) {
        boolean status = false;
        try (Connection con = UTILITY.DBUtility.getConnect()) {
            String sql = "INSERT INTO accounts (customer_id, account_type, balance, account_number) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setInt(1, account.getCustomerId());
            ps.setString(2, account.getAccountType());
            ps.setDouble(3, account.getBalance());
            ps.setString(4, account.getAccountNumber());

            int rows = ps.executeUpdate();
            if(rows>0)
            {
            	return true;
            }
            else
            {
            	return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    public Account getAccountByNumber(String accountNumber) {
        Account acc = null;
        try (Connection con = UTILITY.DBUtility.getConnect()) {
            String sql = "SELECT * FROM accounts WHERE account_number=?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, accountNumber);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                acc = new Account();
                acc.setAccountId(rs.getInt("account_id"));
                acc.setCustomerId(rs.getInt("customer_id"));
                acc.setAccountType(rs.getString("account_type"));
                acc.setBalance(rs.getDouble("balance"));
                acc.setAccountNumber(rs.getString("account_number"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return acc;
    }

	
	public double getBalance(String accountno) {
		// TODO Auto-generated method stub
		double balance=0.0;
		Connection conn=DBUtility.getConnect();
		try {
			String sql="select balance from accounts where account_number=?";
			PreparedStatement ps=conn.prepareStatement(sql);
			ps.setString(1, accountno);
			ResultSet rs=ps.executeQuery();
			
			if(rs.next())
			{
				balance=rs.getDouble("balance");
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
		return balance;
	}

	
	public boolean deposit(String accountno, double amount) {
		// TODO Auto-generated method stub
		Connection conn=DBUtility.getConnect();
		try {
			String sql="update accounts set balance=balance+? where account_number=?";
			PreparedStatement ps=conn.prepareStatement(sql);
			ps.setDouble(1, amount);
			ps.setString(2, accountno);
			int i=ps.executeUpdate();
			
			if(i>0)
			{
				String txn = "INSERT INTO transactions (account_number, transaction_type, amount) " +
                        "SELECT account_number, 'DEPOSIT', ? FROM accounts WHERE account_number=?";
           PreparedStatement ps2 = conn.prepareStatement(txn);
           ps2.setDouble(1, amount);
           ps2.setString(2, accountno);
           ps2.executeUpdate();
           return true;

			}else
			{
				return false;
			}
			
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return false;
	}

	
	public boolean withdraw(String accountno, double amount) {
		// TODO Auto-generated method stub
		Connection conn=DBUtility.getConnect();
		try {
	        // check balance first
	        String check = "SELECT balance, account_number FROM accounts WHERE account_number=?";
	        PreparedStatement psCheck = conn.prepareStatement(check);
	        psCheck.setString(1, accountno);
	        ResultSet rs = psCheck.executeQuery();

	        if (rs.next()) {
	            double balance = rs.getDouble("balance");
	            int accountId = rs.getInt("account_id");

	            if (balance >= amount) {
	                // deduct balance
	                String sql = "update accounts set balance=balance-? where account_number=?";
	                PreparedStatement ps = conn.prepareStatement(sql);
	                ps.setDouble(1, amount);
	                ps.setString(2, accountno);
	                ps.executeUpdate();

	                // record transaction
	                String txn = "INSERT INTO transactions (account_number, transaction_type, amount) VALUES (?, 'WITHDRAW', ?)";
	                PreparedStatement ps2 = conn.prepareStatement(txn);
	                ps2.setInt(1, accountId);
	                ps2.setDouble(2, amount);
	                ps2.executeUpdate();

	                return true;
	            }
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return false;
	}
}